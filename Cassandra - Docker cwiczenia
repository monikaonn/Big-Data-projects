# Wejscie do dokera
sudo docker exec -it cas1 bash      

# Sprawdzenie procesów uruchomionych w kontenerze
ps aux     

sudo docker inspect

# Uruchamianie języka cqlsh
cqlsh

# Sprawdzenie z ilu wezłów składa się klaster, podaje adres kontenera nadany przed dockera, tokeny, id węzła i lokalizację w racku
nodetool status

# Informacje o aktualnym zużyciu pamięci 
nodoetool info


# Wejsie bezpośrednio do języka cqlsh
sudo docker exec -it cas1 cqlsh

# Tworzenie Keyspace (w wiekszosci wypadków wystarczy wpisać pierwszą literę i tab)
CREATE KEYSPACE ex1 WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};

# Przejście do Keyspace
USE ex1;

   CREATE TABLE scores
   (
     user TEXT,
     game TEXT,
     year INT,
     score INT,
     PRIMARY KEY (user, game, year)
   );

   INSERT INTO scores (user, game, year, score) VALUES ('pcmanus', 'Coup', 2015, 4000);
   INSERT INTO scores (user, game, year, score) VALUES ('jbellis', 'Coup', 2015, 1750);
   INSERT INTO scores (user, game, year, score) VALUES ('yukim', 'Coup', 2015, 2250);
   INSERT INTO scores (user, game, year, score) VALUES ('tjake', 'Coup', 2015, 500);
   INSERT INTO scores (user, game, year, score) VALUES ('jmckenzie', 'Coup', 2015, 2000);
   INSERT INTO scores (user, game, year, score) VALUES ('iamaleksey', 'Coup', 2015, 2500);
   INSERT INTO scores (user, game, year, score) VALUES ('tjake', 'Coup', 2015, 1000);
   INSERT INTO scores (user, game, year, score) VALUES ('pcmanus', 'Coup', 2015, 2000);

SELECT * from scores ;

INSERT INTO scores (user, game, year, score) VALUES ( 'pcmanus', 'Coup', 2016, 2100);
SELECT * FROM SCORES WHERE user='pcmanus' AND game='Coup' AND year>2015;

SELECT * FROM SCORES WHERE user='pcmanus' AND game='Coup' AND year>=2015 ORDER BY game DESC , year DESC ;

UPDATE scores SET score = 3100 WHERE user ='pcmanus' AND game='Football' AND year=2017;

DELETE from scores WHERE user='pcmanus' AND game='Football' AND year > 2000;

SELECT * from scores WHERE user='pcmanus' AND game='Coup' AND year=2015 AND score=2000 ALLOW FILTERING ;

INSERT INTO scores (user , game , year , score ) VALUES ( 'jbellis', 'Coup', 2020, 3000) USING TTL 10;
UPDATE scores USING TTL 10 SET score = 3000 WHERE user='jbellis' AND game = 'Coup' AND year=2015;

 ALTER TABLE scores ADD try INT;
  UPDATE scores SET try =1 WHERE user='pcmanus' AND game='Coup' AND year=2015;
  
# Dodawanie liczników
     CREATE TABLE user_action (
       user_id text,
       logins counter,
       psw_change counter,
       PRIMARY KEY (user_id)
     );


UPDATE user_action SET logins = logins+30, psw_change=psw_change+1 WHERE user_id='thissomeuser';


# Usuwanie danych z tabeli bez usunięcia schematu:
TRUNCATE TABLE user_action;

# Usuwanie całej tabeli
DROP TABLE user_action;

# Set
CREATE TABLE users (
   user_id text,
   first_name text,
   last_name text,
   emails set<text>,
   PRIMARY KEY(user_id)
);

INSERT INTO users (user_id, first_name, last_name, emails) VALUES('bla', 'Tom', 'Somesurname', {'email1@gmail.com', 'email2@wp.pl'});
UPDATE users SET emails = emails + {'email3@server.pl'} WHERE user_id='bla';
UPDATE users SET emails = emails - {'email2@wp.pl'} WHERE user_id='bla';

# Listy
ALTER TABLE users ADD addresses list<text>;
UPDATE users SET addresses = ['Warsaw', 'Gdansk', 'Wroclaw'] WHERE user_id='bla';
UPDATE users SET addresses -= ['Gdansk', 'Wroclaw'] WHERE user_id='bla';

UPDATE users SET addresses = ['Warsaw', 'Gdansk', 'Wroclaw'] WHERE user_id='bla';
UPDATE users SET addresses += ['Gdansk'] WHERE user_id='bla';
UPDATE users SET addresses[3] = 'Lodz' WHERE user_id='bla';


ALTER TABLE users DROP emails;

# Map
ALTER TABLE users ADD meta map<text, text>;
UPDATE users SET meta = {'klucz':'wartosc'} WHERE user_id='bla';
UPDATE users SET meta['klucz2'] = 'c' WHERE user_id='bla';
UPDATE users SET meta['klucz2'] = null WHERE user_id='bla';

ALTER TABLE users ADD tags map<text, frozen<list<int>>>;
UPDATE users SET tags['klucz'] = [0,1,2] WHERE user_id='bla';

# Tuples
CREATE TABLE collect_things (
       k int PRIMARY KEY,
       v tuple<int, text, float>
);
INSERT INTO collect_things (k, v) VALUES(0, (3, 'bar', 2.1));

# User defined types (UDT)
CREATE TYPE address (
      street text,
      city text,
      zip_code int,
      phones frozen<set<text>>
    );

    CREATE TABLE users (
      id uuid PRIMARY KEY,
      address address
    );

INSERT INTO users (id, address) VALUES (uuid(), {
        street: 'Dworcowa',
        city: 'Warszawa',
        zip_code: 12345,
        phones: {'+481231212'}
    });

UPDATE users SET address.city = 'Poznań' WHERE id = 0e98dfce-379c-42a5-8f10-6342ae2e663e;
SELECT * FROM users WHERE id=0e98dfce-379c-42a5-8f10-6342ae2e663e ;

# Agregacje
select min(score), max(score), avg(score), sum(score) from scores where user='pcmanus';

# Secondary index
CREATE INDEX scores_by_score ON scores (score);
SELECT * FROM scores WHERE user='pcmanus' AND score=4000;

# Hurtowy zapis danych
COPY scores (user, game, year, score) TO 'backup.csv' WITH HEADER=TRUE;
TRUNCATE scores;
COPY scores (user, game, year, score) FROM 'backup.csv' WITH HEADER=TRUE;




